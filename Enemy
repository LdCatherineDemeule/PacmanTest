using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class NME : MonoBehaviour
{
    Vector3 direction = Vector2.left;
    float maxRayDistance = 0.17f;
    float speed = 0.6f;
    RaycastHit hit;
    SphereCollider coll;
    Vector3 startPosition;

    public float delayStart;
    float delayStKeep;
    float startSpeed = 0;
    public bool hasStarted;

    float delay;
    public bool allowTurn = true;

    void Start()
    {
        coll = gameObject.transform.GetComponent<SphereCollider>();
        startPosition = gameObject.transform.position;
        delayStKeep = delayStart;
    }


    void Update()
    {
        Physics.Raycast(transform.position, direction, out hit, maxRayDistance);

        if (hit.collider)
            ChangeDirection();

        transform.Translate(direction * startSpeed * Time.deltaTime);

        if (delay > 0)
            Timer();

        if(!hasStarted)
        if (delayStart > 0)
            Timer();
    }

    public void ChangeDirection()
    {
        if (allowTurn)
        {
            RaycastHit doubleCheck;

            int newD = Probability(3);
            if (newD == 0 && direction != Vector3.down)
            {
                Physics.Raycast(transform.position, Vector2.up, out doubleCheck, maxRayDistance);
                if (doubleCheck.collider == null)
                {
                    direction = Vector2.up;
                }

                else
                    ChangeDirection();
            }
            else
                if (newD == 1 && direction != Vector3.up)
            {
                Physics.Raycast(transform.position, Vector2.down, out doubleCheck, maxRayDistance);
                if (doubleCheck.collider == null)
                {
                    direction = Vector2.down;
                }
                else
                    ChangeDirection();
            }
            else
                if (newD == 2 && direction != Vector3.left)
            {
                Physics.Raycast(transform.position, Vector2.right, out doubleCheck, maxRayDistance);
                if (doubleCheck.collider == null)
                {
                    direction = Vector2.right;
                }

                else
                    ChangeDirection();
            }
            else
            {
                if (direction != Vector3.right)
                {
                    Physics.Raycast(transform.position, Vector2.left, out doubleCheck, maxRayDistance);
                    if (doubleCheck.collider == null)
                    {
                        direction = Vector2.left;
                    }
                    else
                        ChangeDirection();
                }

            }
            allowTurn = false;
            ResetChange();
        }
    }

    int Probability(int i)
    {
        int newN = Random.Range(0, i);
        return newN;
    }
    void Timer()
    {
        delay -= Time.deltaTime;
        if (delay < 0)
            ConsequenceTimer();
        if(!hasStarted)
        {
            delayStart -= Time.deltaTime;
            if (delayStart < 0)
                StartRacePac();
        }
    }

    void ConsequenceTimer()
    {
        allowTurn = true;
    }

    void ResetChange()
    {
        delay = 0.4f;
        Timer();
    }

    void StartRacePac()
    {
        hasStarted = true;
        startSpeed = speed;
    }

    void RespawnNME()
    {
        transform.position = startPosition;
    }

    public void RespawnAfterDeath()
    {
        startSpeed = 0;
        RespawnNME();
        hasStarted = false;
        delayStart = delayStKeep;
    }

    void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            if (GameManager.instance.avatar.isHero)
                RespawnNME();
            else
                GameManager.instance.avatar.DeathEvents();
        }
    }
}
